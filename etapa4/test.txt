// OK • variáveis redeclaradas
inte a = 1;
inte v[4] 2 2 2 '4';
real z[4] 2.2 2.2 2.2 4.2;
//inte a = 0;

// OK • anotar tipo (natureza) (escalares, vetores, funções) nas tabela hash 

// OK • anotar tipo de dado (dataType) (cara, inte, real) na tabela hash
// OK • variáveis não-declaradas
real aux(real d, inte e) {
    //retorne 4;
}
inte ehogais() {
    escreva "kkk"
}
inte main(inte f, cara g, real h) {
    f = main(4, '4', 4.4);
    //v[g+h] = 4;
    v[g+f] = 4+1+'f';
    v[4] = g + g;
    h = aux(h, f);
    escreva "teste";

    //a = entrada;

    {
        f = v[1];
    } enquanto (h<4.4 | h> 5.4);

    entaum {
        f = v[1];
    } se (h > 5.4);

    entaum {
        f = v[1];
    } senaum {
        f = v[f] + f + main(f, g, h) + ehogais();
    } se (g > f);

    escreva main(f,g,h) "oi" f g+g+f h;

    g = entrada;


// • verificar natureza, se:
//     - escalares são usados como escalares
//     - vetores são usados como vetores
//     - funções são usadas como funções
//     - não esqueça de verificar no lado direito (expressões) e no lado esquerdo (atribuições)
// • verificar tipos de dados nas expressões
// • verificar argumentos de chamada de função versus parâmetros:
//     - não pode haver menos argumentos
//     - não pode haver mais argumentos
//     - os tipos devem ser compatíveis (não iguais, lembre-se)
// • verificar o tamanho e a lista de inicialização do vetor;
// • verificar tipo do valor de retorno da função
// • verificar índices dos vetores (não pode ser booleano, não pode ser real), tanto na expressão quanto na atribuição

}